// Code generated by mockery v2.42.1. DO NOT EDIT.

//go:build !compile

package mocks

import (
	wasabi "github.com/ksysoev/wasabi"
	mock "github.com/stretchr/testify/mock"

	websocket "nhooyr.io/websocket"
)

// MockOnMessage is an autogenerated mock type for the OnMessage type
type MockOnMessage struct {
	mock.Mock
}

type MockOnMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnMessage) EXPECT() *MockOnMessage_Expecter {
	return &MockOnMessage_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: conn, msgType, data
func (_m *MockOnMessage) Execute(conn wasabi.Connection, msgType websocket.MessageType, data []byte) {
	_m.Called(conn, msgType, data)
}

// MockOnMessage_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOnMessage_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - conn wasabi.Connection
//   - msgType websocket.MessageType
//   - data []byte
func (_e *MockOnMessage_Expecter) Execute(conn interface{}, msgType interface{}, data interface{}) *MockOnMessage_Execute_Call {
	return &MockOnMessage_Execute_Call{Call: _e.mock.On("Execute", conn, msgType, data)}
}

func (_c *MockOnMessage_Execute_Call) Run(run func(conn wasabi.Connection, msgType websocket.MessageType, data []byte)) *MockOnMessage_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wasabi.Connection), args[1].(websocket.MessageType), args[2].([]byte))
	})
	return _c
}

func (_c *MockOnMessage_Execute_Call) Return() *MockOnMessage_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnMessage_Execute_Call) RunAndReturn(run func(wasabi.Connection, websocket.MessageType, []byte)) *MockOnMessage_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnMessage creates a new instance of MockOnMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnMessage {
	mock := &MockOnMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
