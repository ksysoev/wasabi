// Code generated by mockery v2.42.1. DO NOT EDIT.

//go:build !compile

package mocks

import (
	context "context"

	wasabi "github.com/ksysoev/wasabi"
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/coder/websocket"
)

// MockConnectionRegistry is an autogenerated mock type for the ConnectionRegistry type
type MockConnectionRegistry struct {
	mock.Mock
}

type MockConnectionRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionRegistry) EXPECT() *MockConnectionRegistry_Expecter {
	return &MockConnectionRegistry_Expecter{mock: &_m.Mock}
}

// CanAccept provides a mock function with given fields:
func (_m *MockConnectionRegistry) CanAccept() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanAccept")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectionRegistry_CanAccept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanAccept'
type MockConnectionRegistry_CanAccept_Call struct {
	*mock.Call
}

// CanAccept is a helper method to define mock.On call
func (_e *MockConnectionRegistry_Expecter) CanAccept() *MockConnectionRegistry_CanAccept_Call {
	return &MockConnectionRegistry_CanAccept_Call{Call: _e.mock.On("CanAccept")}
}

func (_c *MockConnectionRegistry_CanAccept_Call) Run(run func()) *MockConnectionRegistry_CanAccept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionRegistry_CanAccept_Call) Return(_a0 bool) *MockConnectionRegistry_CanAccept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionRegistry_CanAccept_Call) RunAndReturn(run func() bool) *MockConnectionRegistry_CanAccept_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockConnectionRegistry) Close(ctx ...context.Context) error {
	_va := make([]interface{}, len(ctx))
	for _i := range ctx {
		_va[_i] = ctx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...context.Context) error); ok {
		r0 = rf(ctx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionRegistry_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionRegistry_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx ...context.Context
func (_e *MockConnectionRegistry_Expecter) Close(ctx ...interface{}) *MockConnectionRegistry_Close_Call {
	return &MockConnectionRegistry_Close_Call{Call: _e.mock.On("Close",
		append([]interface{}{}, ctx...)...)}
}

func (_c *MockConnectionRegistry_Close_Call) Run(run func(ctx ...context.Context)) *MockConnectionRegistry_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]context.Context, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(context.Context)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockConnectionRegistry_Close_Call) Return(_a0 error) *MockConnectionRegistry_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionRegistry_Close_Call) RunAndReturn(run func(...context.Context) error) *MockConnectionRegistry_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnection provides a mock function with given fields: id
func (_m *MockConnectionRegistry) GetConnection(id string) wasabi.Connection {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 wasabi.Connection
	if rf, ok := ret.Get(0).(func(string) wasabi.Connection); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wasabi.Connection)
		}
	}

	return r0
}

// MockConnectionRegistry_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type MockConnectionRegistry_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
//   - id string
func (_e *MockConnectionRegistry_Expecter) GetConnection(id interface{}) *MockConnectionRegistry_GetConnection_Call {
	return &MockConnectionRegistry_GetConnection_Call{Call: _e.mock.On("GetConnection", id)}
}

func (_c *MockConnectionRegistry_GetConnection_Call) Run(run func(id string)) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConnectionRegistry_GetConnection_Call) Return(_a0 wasabi.Connection) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionRegistry_GetConnection_Call) RunAndReturn(run func(string) wasabi.Connection) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// HandleConnection provides a mock function with given fields: ctx, ws, cb
func (_m *MockConnectionRegistry) HandleConnection(ctx context.Context, ws *websocket.Conn, cb wasabi.OnMessage) {
	_m.Called(ctx, ws, cb)
}

// MockConnectionRegistry_HandleConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleConnection'
type MockConnectionRegistry_HandleConnection_Call struct {
	*mock.Call
}

// HandleConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - ws *websocket.Conn
//   - cb wasabi.OnMessage
func (_e *MockConnectionRegistry_Expecter) HandleConnection(ctx interface{}, ws interface{}, cb interface{}) *MockConnectionRegistry_HandleConnection_Call {
	return &MockConnectionRegistry_HandleConnection_Call{Call: _e.mock.On("HandleConnection", ctx, ws, cb)}
}

func (_c *MockConnectionRegistry_HandleConnection_Call) Run(run func(ctx context.Context, ws *websocket.Conn, cb wasabi.OnMessage)) *MockConnectionRegistry_HandleConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*websocket.Conn), args[2].(wasabi.OnMessage))
	})
	return _c
}

func (_c *MockConnectionRegistry_HandleConnection_Call) Return() *MockConnectionRegistry_HandleConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnectionRegistry_HandleConnection_Call) RunAndReturn(run func(context.Context, *websocket.Conn, wasabi.OnMessage)) *MockConnectionRegistry_HandleConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionRegistry creates a new instance of MockConnectionRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionRegistry {
	mock := &MockConnectionRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
